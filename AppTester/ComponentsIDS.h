#pragma once

// Testing Frame ids
struct TF_IDS {
	TF_IDS(wxWindowID main_frame_id, int dialgos_count) {
		MAIN_FRAME_ID = main_frame_id;
		LIMITER_ID = MAIN_FRAME_ID + 2;
		CPU_COUNTER_ID = MAIN_FRAME_ID + 3;
		MENU_NEW_ID = MAIN_FRAME_ID + 10;
		MENU_OPEN_ID = MAIN_FRAME_ID + 11;
		MENU_SAVE_ID = MAIN_FRAME_ID + 12;
		MENU_PRINT_ID = MAIN_FRAME_ID + 13;
		MENU_ACC_ID = MAIN_FRAME_ID + 14;
		MENU_OPT_ID = MAIN_FRAME_ID + 15;
		MENU_CUSTOM_ID = MAIN_FRAME_ID + 16;
		MENU_EXIT_ID = MAIN_FRAME_ID + 18;
		MENU_HELP_ID = MAIN_FRAME_ID + 21;
		MENU_FEEDBACK_ID = MAIN_FRAME_ID + 22;
		MENU_UPDATES_ID = MAIN_FRAME_ID + 23;
		TOOLBAR_ID = MAIN_FRAME_ID + 50;
		REFRESH_BTN_ID = MAIN_FRAME_ID + 51;
		NOTEBOOK_ID = MAIN_FRAME_ID + 100;
		NB_PAGE_1_ID = MAIN_FRAME_ID + 101;
		NW_BTN_ID = MAIN_FRAME_ID + 102;
		NNW_BTN_ID = MAIN_FRAME_ID + 103;
		N_BTN_ID = MAIN_FRAME_ID + 104;
		NNE_BTN_ID = MAIN_FRAME_ID + 105;
		NE_BTN_ID = MAIN_FRAME_ID + 106;
		NEE_BTN_ID = MAIN_FRAME_ID + 107;
		E_BTN_ID = MAIN_FRAME_ID + 108;
		SEE_BTN_ID = MAIN_FRAME_ID + 109;
		SE_BTN_ID = MAIN_FRAME_ID + 110;
		SSE_BTN_ID = MAIN_FRAME_ID + 111;
		S_BTN_ID = MAIN_FRAME_ID + 112;
		SSW_BTN_ID = MAIN_FRAME_ID + 113;
		SW_BTN_ID = MAIN_FRAME_ID + 114;
		SWW_BTN_ID = MAIN_FRAME_ID + 115;
		W_BTN_ID = MAIN_FRAME_ID + 116;
		NWW_BTN_ID = MAIN_FRAME_ID + 117;
		COMPASS_TXT_ID = MAIN_FRAME_ID + 118;
		NB_PAGE_2_ID = MAIN_FRAME_ID + 120;
		PAGE_LIST_ID = MAIN_FRAME_ID + 121;
		PAGE_CHECK_ID = MAIN_FRAME_ID + 122;
		PAGE_RADIO_ID = MAIN_FRAME_ID + 123;
		NB_PAGE_3_ID = MAIN_FRAME_ID + 150;
		PAGE_CHOICE_ID = MAIN_FRAME_ID + 151;
		PAGE_COMBO_ID = MAIN_FRAME_ID + 152;
		PAGE_SPIN_ID = MAIN_FRAME_ID + 153;
		PAGE_CALENDAR_ID = MAIN_FRAME_ID + 154;
		PAGE_FILE_CTRL_ID = MAIN_FRAME_ID + 155;
		TOP_RIGHT_ID = MAIN_FRAME_ID + 200;
		TR_TXT_ID = MAIN_FRAME_ID + 201;
		for(auto i = 0; i < dialgos_count; ++i){
			MAIN_BTN_IDS.push_back(MAIN_FRAME_ID + 202 + i);
		}
		TR_LIST_ID = MAIN_FRAME_ID + 222;
		BOTTOM_LEFT_ID = MAIN_FRAME_ID + 300;
		TABLE_ID = MAIN_FRAME_ID + 301;
		REPORT_TITLE_ID = MAIN_FRAME_ID + 302;
		REPORT_DATE_ID = MAIN_FRAME_ID + 303;
		REPORT_FONT_ID = MAIN_FRAME_ID + 304;
		REPORT_TXT_FIELD_ID = MAIN_FRAME_ID + 305;
		REPORT_SAVE_ID = MAIN_FRAME_ID + 306;
		REPORT_PRINT_ID = MAIN_FRAME_ID + 307;
		REPORT_SEND_ID = MAIN_FRAME_ID + 308;
		REPORT_TASKS_ID = MAIN_FRAME_ID + 310;
		BOTTOM_RIGHT_ID = MAIN_FRAME_ID + 400;
		BR_CMB_BOX_ID = MAIN_FRAME_ID + 401;
		BR_RADIO_BOX_ID = MAIN_FRAME_ID + 402;
		BR_GAUGE_ID = MAIN_FRAME_ID + 403;
		BR_INC_BTN_ID = MAIN_FRAME_ID + 404;
		BR_DEC_BTN_ID = MAIN_FRAME_ID + 405;
		BR_GTXT_ID = MAIN_FRAME_ID + 406;
		BR_GLVL_ID = MAIN_FRAME_ID + 407;
		BR_FILE_PICKER_ID = MAIN_FRAME_ID + 408;
		BR_DIR_PICKER_ID = MAIN_FRAME_ID + 409;
	};

	wxWindowID MAIN_FRAME_ID;
	wxWindowID LIMITER_ID;
	wxWindowID CPU_COUNTER_ID;
	wxWindowID MENU_NEW_ID;
	wxWindowID MENU_OPEN_ID;
	wxWindowID MENU_SAVE_ID;
	wxWindowID MENU_PRINT_ID;
	wxWindowID MENU_ACC_ID;
	wxWindowID MENU_OPT_ID;
	wxWindowID MENU_CUSTOM_ID;
	wxWindowID MENU_EXIT_ID;
	wxWindowID MENU_HELP_ID;
	wxWindowID MENU_FEEDBACK_ID;
	wxWindowID MENU_UPDATES_ID;
	wxWindowID TOOLBAR_ID;
	wxWindowID REFRESH_BTN_ID;
	wxWindowID NOTEBOOK_ID;
	wxWindowID NB_PAGE_1_ID;
	wxWindowID NB_PAGE_2_ID;
	wxWindowID NB_PAGE_3_ID;
	wxWindowID NW_BTN_ID;
	wxWindowID NNW_BTN_ID;
	wxWindowID N_BTN_ID;
	wxWindowID NNE_BTN_ID;
	wxWindowID NE_BTN_ID;
	wxWindowID NEE_BTN_ID;
	wxWindowID E_BTN_ID;
	wxWindowID SEE_BTN_ID;
	wxWindowID SE_BTN_ID;
	wxWindowID SSE_BTN_ID;
	wxWindowID S_BTN_ID;
	wxWindowID SSW_BTN_ID;
	wxWindowID SW_BTN_ID;
	wxWindowID SWW_BTN_ID;
	wxWindowID W_BTN_ID;
	wxWindowID NWW_BTN_ID;
	wxWindowID COMPASS_TXT_ID;
	wxWindowID PAGE_LIST_ID;
	wxWindowID PAGE_CHECK_ID;
	wxWindowID PAGE_RADIO_ID;
	wxWindowID PAGE_CHOICE_ID;
	wxWindowID PAGE_COMBO_ID;
	wxWindowID PAGE_SPIN_ID;
	wxWindowID PAGE_CALENDAR_ID;
	wxWindowID PAGE_FILE_CTRL_ID;
	wxWindowID TOP_RIGHT_ID;
	wxWindowID TR_TXT_ID;
	std::vector<wxWindowID> MAIN_BTN_IDS;
	wxWindowID TR_LIST_ID;
	wxWindowID BOTTOM_LEFT_ID;
	wxWindowID TABLE_ID;
	wxWindowID REPORT_TITLE_ID;
	wxWindowID REPORT_DATE_ID;
	wxWindowID REPORT_FONT_ID;
	wxWindowID REPORT_TXT_FIELD_ID;
	wxWindowID REPORT_SAVE_ID;
	wxWindowID REPORT_PRINT_ID;
	wxWindowID REPORT_SEND_ID;
	wxWindowID REPORT_TASKS_ID;
	wxWindowID BOTTOM_RIGHT_ID;
	wxWindowID BR_CMB_BOX_ID;
	wxWindowID BR_RADIO_BOX_ID;
	wxWindowID BR_GAUGE_ID;
	wxWindowID BR_INC_BTN_ID;
	wxWindowID BR_DEC_BTN_ID;
	wxWindowID BR_GTXT_ID;
	wxWindowID BR_GLVL_ID;
	wxWindowID BR_FILE_PICKER_ID;
	wxWindowID BR_DIR_PICKER_ID;
};

// Dialog ids
struct DF_IDS {
	DF_IDS(wxWindowID dialog_id, size_t bitmaps) {
		DIALOG_ID = dialog_id;
		DIALOG_TXT_ID = DIALOG_ID + 1;
		for (auto i = 0; i < 2 * bitmaps; ++i) {
			DIALOG_BIT_MAP_IDS.push_back(DIALOG_ID + 2 + i);
		}
		DIALOG_CANCEL_ID = DIALOG_ID + 101;
		DIALOG_SAVE_ID = DIALOG_ID + 102;
		DIALOG_CLOSE_ID = DIALOG_ID + 103;
	}

	wxWindowID DIALOG_ID;
	wxWindowID DIALOG_TXT_ID;
	std::vector<wxWindowID> DIALOG_BIT_MAP_IDS;
	wxWindowID DIALOG_CANCEL_ID;
	wxWindowID DIALOG_SAVE_ID;
	wxWindowID DIALOG_CLOSE_ID;
};